@ ./pm-synth audio:custom {
  .meta [map graph.x 0 graph.y 0]
  .code {

    @Out(1) AudioOut out;
    
    @UGen Osc mod;
    @UGen LFO lfo, car;
    @UGen Gain amp;
    
    @P(1) @Type.Number(min=0, max=1, def=1)
    double level;
    @P(2) @Type.Number(min=0, max=2)
    double attack;
    @P(3) @Type.Number(min=0, max=2, def=0.5)
    double decay;
    @P(4) @Type.Number(min=0, max=1, def=0.5)
    double sustain;
    @P(5) @Type.Number(min=0, max=2, def=0)
    double release;
    @P(6) @Type.Number(min=0, max=16, def=3.0)
    double modRatio;
    @P(7) @Type.Number(min=0, max=1, def=0.5)
    double modLevel;
    @P(8) @Type.Number(min=0, max=2)
    double modAttack;
    @P(9) @Type.Number(min=0, max=2, def=0.5)
    double modDecay;
    @P(10) @Type.Number(min=0, max=1, def=0.5)
    double modSustain;
    @P(11) @Type.Number(min=0, max=16, def=1)
    Property lfoFrequency;
    @P(12) @Type.Number(min=0, max=1, def=0.5)
    Property lfoLevel;

    @Inject Property frequency, modEnv, ampEnv;
    
    @Override
    public void init() {
        car.waveform(SAW);
        frequency.link(car::frequency);
        ampEnv.link(d -> amp.level( (d * d) * level) );
        lfoFrequency.link(lfo::frequency);
        lfoLevel.link(lfo::gain);
        link(car, modFn(add(mod, lfo), (m,c) -> sin( (m + c) * TWO_PI )), amp, out);
    }

    @Override
    public void update() {
        mod.frequency(modRatio * D(frequency)).gain(D(modEnv) * modLevel);
    } 
    
    @In(1) void note(String note) {
        if (note.isEmpty() || "-".equals(note)) {
            return;
        }
        int midi = noteToMidi(note);
        if (midi > 0) {
            noteOn(midi);
        } else {
            noteOff();
        }
    }
    
    void noteOn(int midi) {
        frequency.set(midiToFrequency(midi));
        modEnv.to(1, modSustain).in(modAttack, modDecay);
        ampEnv.to(1, sustain).in(attack, decay);
    }
    
    void noteOff() {
        ampEnv.to(0).in(release);
    }
      
}
}
