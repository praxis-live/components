@ ./duo-osc audio:custom {
  .meta [map graph.x 0 graph.y 0]
  .code {

    final String SW = "Saw";
    final String SQ = "Square";
    
    @Out(1) AudioOut out;
    
    @UGen Osc osc, osc2;
    @UGen IIRFilter filter;
    @UGen Gain amp;
    
    @P(1) @Type.String(allowed = {SW, SQ})
    Property waveform1;
    @P(2) @Type.String(allowed = {SW, SQ})
    Property waveform2;
    @P(3) @Type.Number(min=0, max=1, def=1)
    double level;
    @P(4) @Type.Number(min=0, max=1, def=0) 
    Property osc2Level;
    @P(5) @Type.Integer(min=-24, max=24, def=-12) 
    int osc2Transpose;
    @P(6) @Type.Number(min=110, max=8000, def=8000)
    double cutoff;
    @P(7) @Type.Number(min=0, max=20)
    Property resonance;
    @P(8) @Type.Number(min=0, max=2)
    double attack;
    @P(9) @Type.Number(min=0, max=2, def=2)
    double decay;
    @P(10) @Type.Number(min=0, max=1, def=1)
    double sustain;
    @P(11) @Type.Number(min=0, max=2, def=0)
    double release;
    @P(12) @Type.Number(min=0, max=1) 
    double filterMod;
    @P(13) @Type.Number(min=0, max=1, def=1) 
    double ampMod;

    @Inject Property freq1, freq2, env;
    
    @Override
    public void init() {
        link(add(osc, osc2), filter.type(IIRFilter.LP12), amp, out);
        
        waveform1.valuesAs(Value::toString).map(w -> Waveform.valueOf(w)).link(osc::waveform);
        waveform2.valuesAs(Value::toString).map(w -> Waveform.valueOf(w)).link(osc2::waveform);
        freq1.link(osc::frequency);
        freq2.link(osc2::frequency);
        osc2Level.doubles().map(d -> d*d).link(osc2::gain);
        resonance.link(filter::resonance);
        
        env.doubles().map(e -> {
            double hz = D(freq1);
            hz = (e * hz * 7) + hz;
            return (filterMod * hz) + ((1 - filterMod) * cutoff);
        }).link(filter::frequency);
        
        env.doubles().map(e -> {
            e = e < 0.001 ? 0 : (ampMod * e * e) + (1 - ampMod);
            return e * level * level;
        }).link(amp::level);
        
    }
    
    @In(1) void note(String note) {
        if (note.isEmpty() || "-".equals(note)) {
            return;
        }
        int midi = noteToMidi(note);
        if (midi > 0) {
            noteOn(midi);
        } else {
            noteOff();
        }
    }
    
    void noteOn(int midi) {
        double f = midiToFrequency(midi);
        freq1.set(f);
        double f2 = midiToFrequency(midi + osc2Transpose);
        freq2.set(f2);
        env.to(1,sustain).in(attack,decay);
    }
    
    void noteOff() {
        env.to(0).in(release);
    }
    
}
}
